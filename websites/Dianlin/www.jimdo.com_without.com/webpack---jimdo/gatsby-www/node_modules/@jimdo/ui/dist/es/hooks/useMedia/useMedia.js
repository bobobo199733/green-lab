import { useState, useEffect } from 'react';
import findLastIndex from 'lodash.findlastindex';
/* Based on the useMedia hook from useHooks website - https://usehooks.com/useMedia/ */

var useMedia = function (queries, values, defaultValue) {
  // Array containing a media query list for each query
  // ensure that length of queries array matches that of values array
  // also ensure that window object is available to make it work with server-side rendering
  var mediaQueryLists = typeof window === 'undefined' ? [] : queries.slice(0, values.length).map(function (q) {
    return window.matchMedia(q);
  }); // Function that gets value based on matching media query

  var getValue = function () {
    // Get index of first media query that matches
    var index = findLastIndex(mediaQueryLists, function (mql) {
      return mql.matches;
    }); // Return related value or defaultValue if none

    return (values === null || values === void 0 ? void 0 : values[index]) || defaultValue;
  }; // State and setter for matched value


  var _a = useState(getValue),
      value = _a[0],
      setValue = _a[1];

  useEffect(function () {
    // Event listener callback
    // Note: By defining getValue outside of useEffect we ensure that it has ...
    // ... current values of hook args (as this hook callback is created once on mount).
    var handler = function () {
      return setValue(getValue);
    }; // Set a listener for each media query with above handler as callback.


    mediaQueryLists.forEach(function (mql) {
      // "addEventListener" is not supported in Safari 13 and below
      if (mql.addEventListener) {
        mql.addEventListener('change', handler);
      } else {
        mql.addListener(handler);
      }
    }); // Remove listeners on cleanup

    return function () {
      return mediaQueryLists.forEach(function (mql) {
        // "removeEventListener" is not supported in Safari 13 and below
        if (mql.removeEventListener) {
          mql.removeEventListener('change', handler);
        } else {
          mql.removeListener(handler);
        }
      });
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return value;
};

export { useMedia };