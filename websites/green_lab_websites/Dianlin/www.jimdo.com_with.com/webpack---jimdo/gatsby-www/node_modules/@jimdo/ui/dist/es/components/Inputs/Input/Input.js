import { __rest, __assign } from '../../../_virtual/_tslib.js';
import { Icon } from '../../DataDisplay/Icon/Icon.js';
import { IconButton } from '../../Buttons/IconButton/IconButton.js';
import { iconCheckmark, iconHidden, iconVisible } from '../../DataDisplay/Icon/icons.js';
import { Popover } from '../../DataDisplay/Popover/Popover.js';
import { Typography } from '../../DataDisplay/Typography/Typography.js';
import classNames from 'classnames';
import inputFieldStyles from '../InputField.module.scss.js';
import React, { useState, useRef } from 'react';
import styles from './Input.module.scss.js';

var formatInputValue = function (value) {
  return value === undefined ? undefined : String(value);
};

var Input = function (props) {
  var _a, _b;

  var disablePasswordReveal = props.disablePasswordReveal,
      hint = props.hint,
      inputClassName = props.inputClassName,
      label = props.label,
      leftElement = props.leftElement,
      message = props.message,
      _c = props.passwordRevealTooltipText,
      passwordRevealTooltipText = _c === void 0 ? {
    show: 'Show password',
    hide: 'Hide password'
  } : _c,
      reference = props.reference,
      rightElement = props.rightElement,
      successMessage = props.successMessage,
      suffix = props.suffix,
      inputProps = __rest(props, ["disablePasswordReveal", "hint", "inputClassName", "label", "leftElement", "message", "passwordRevealTooltipText", "reference", "rightElement", "successMessage", "suffix"]);

  var _d = useState(false),
      isPasswordRevealed = _d[0],
      setIsPasswordRevealed = _d[1];

  var inputReference = useRef(null);
  var wrapperClasses = classNames(inputFieldStyles.inputWrapper, props.className);
  var inputFieldWrapperClasses = classNames(inputFieldStyles.inputFieldWrapper, inputClassName, (_a = {}, _a[inputFieldStyles.inputError] = message, _a[styles.inputDisabled] = props.disabled, _a));
  var inputFieldClasses = classNames(inputFieldStyles.inputField, (_b = {}, _b[styles.inputNumber] = props.type === 'number', _b[styles.inputDate] = props.type === 'date', _b));
  var inputType = props.type === 'password' && isPasswordRevealed ? 'text' : props.type;

  var handleInputChange = function (event) {
    var _a;

    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, event);
  };

  var focus = function () {
    var _a;

    var currentReference = reference || inputReference;
    (_a = currentReference.current) === null || _a === void 0 ? void 0 : _a.focus();
  };

  var renderLeftElement = function () {
    return leftElement && React.createElement("div", {
      className: styles.inputLeftElementWrapper
    }, leftElement);
  };

  var renderRightElement = function () {
    if (props.type === 'password' && !disablePasswordReveal) {
      return React.createElement(Popover, {
        content: isPasswordRevealed ? passwordRevealTooltipText === null || passwordRevealTooltipText === void 0 ? void 0 : passwordRevealTooltipText.hide : passwordRevealTooltipText === null || passwordRevealTooltipText === void 0 ? void 0 : passwordRevealTooltipText.show,
        theme: "dark",
        offset: [0, -5],
        wrapChildrenForRef: true
      }, React.createElement(IconButton, {
        type: "button",
        buttonStyle: "secondary",
        onClick: function () {
          return setIsPasswordRevealed(!isPasswordRevealed);
        },
        icon: isPasswordRevealed ? iconHidden : iconVisible
      }));
    }

    return rightElement && React.createElement("div", {
      className: styles.inputRightElementWrapper
    }, rightElement);
  };

  return React.createElement("div", {
    className: wrapperClasses
  }, label && React.createElement(React.Fragment, null, successMessage && React.createElement("span", {
    className: styles.successMessage
  }, React.createElement(Icon, {
    icon: iconCheckmark,
    className: styles.successIcon
  }), successMessage), React.createElement("label", {
    className: inputFieldStyles.inputFieldLabel,
    htmlFor: props.name
  }, label)), hint && React.createElement(Typography, {
    variant: "bodyDefault",
    marginBottom: "zero",
    component: "span",
    className: styles.inputHint
  }, hint), React.createElement("div", {
    className: inputFieldWrapperClasses
  }, renderLeftElement(), React.createElement("input", __assign({}, inputProps, {
    id: props.name,
    type: inputType,
    defaultValue: formatInputValue(props.defaultValue),
    value: formatInputValue(props.value),
    ref: reference || inputReference,
    className: inputFieldClasses,
    onChange: handleInputChange
  })), suffix && React.createElement("span", {
    className: styles.inputSuffix,
    onClick: focus
  }, React.createElement(Typography, {
    variant: "bodyDefault",
    marginBottom: "zero",
    component: "span"
  }, suffix)), renderRightElement()), message && React.createElement(Typography, {
    variant: "bodySmall",
    marginBottom: "zero",
    component: "span",
    fontWeight: "bold",
    color: "systemColorDanger-500"
  }, message));
};

export { Input };