import { __rest, __assign } from '../../../_virtual/_tslib.js';
import { isBrowser } from '../../../utils/isBrowser.js';
import classNames from 'classnames';
import React, { useRef } from 'react';
import styles from './Popover.module.scss.js';
import Tippy from '@tippyjs/react';

var Popover = function (_a) {
  var _b;

  var children = _a.children,
      content = _a.content,
      _c = _a.trigger,
      trigger = _c === void 0 ? 'mouseenter' : _c,
      isVisible = _a.isVisible,
      _d = _a.preferredPosition,
      preferredPosition = _d === void 0 ? 'top' : _d,
      _e = _a.theme,
      theme = _e === void 0 ? 'dark' : _e,
      className = _a.className,
      noPadding = _a.noPadding,
      _f = _a.interactive,
      interactive = _f === void 0 ? false : _f,
      wrapChildrenForRef = _a.wrapChildrenForRef,
      rest = __rest(_a, ["children", "content", "trigger", "isVisible", "preferredPosition", "theme", "className", "noPadding", "interactive", "wrapChildrenForRef"]);

  var tippyRef = useRef(null);

  var tippyProps = __assign({
    content: content,
    theme: theme === 'light' ? 'light' : undefined,
    animation: 'scale-subtle',
    placement: preferredPosition,
    interactive: interactive,
    className: classNames(styles.popover, className, (_b = {}, _b[styles.noPadding] = noPadding, _b[styles.light] = theme === 'light', _b)),
    appendTo: isBrowser ? document.body : undefined,
    onCreate: function (tip) {
      return tippyRef.current = tip;
    }
  }, rest);

  if (typeof isVisible !== 'undefined') {
    tippyProps.visible = isVisible;
  } else {
    tippyProps.trigger = Array.isArray(trigger) ? trigger.join(' ') : trigger;
  } // we need to wrap the children with a span in case they have functional components - https://github.com/atomiks/tippy.js-react#component-children


  return React.createElement(Tippy, __assign({}, tippyProps), wrapChildrenForRef ? React.createElement("span", {
    tabIndex: -1
  }, children) : children);
};

export { Popover };